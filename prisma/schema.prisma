datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Respondents {
  id                   Int       @id @default(autoincrement())
  auth_id              String    @unique
  age                  Int       @default(-1)
  sex                  String    @default("無回答")
  audio_device         String    @default("無回答")
  is_finished_info     Boolean   @default(false)
  is_finished_practice Boolean   @default(false)
  is_finished_eval_1   Boolean   @default(false)
  Answers              Answers[]
}

model SexItem {
  id   Int    @id @default(autoincrement())
  item String
}

model SampleMetaData {
  id               Int       @id @default(autoincrement())
  file_path        String    @unique
  model_name       String
  speaker_name     String
  sample_name      String
  sample_group     Int
  sample_page_name String
  kind             String
  n_selected       Int       @default(0)
  Answers          Answers[]
}

model NaturalnessItem {
  id      Int       @id @default(autoincrement())
  item    String    @unique
  Answers Answers[]
}

model IntelligibilityItem {
  id      Int       @id @default(autoincrement())
  item    String    @unique
  Answers Answers[]
}

model Answers {
  id                  Int                 @id @default(autoincrement())
  respondent          Respondents         @relation(fields: [respondent_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  respondent_id       Int
  sample_meta_data    SampleMetaData      @relation(fields: [sample_meta_data_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  sample_meta_data_id Int
  naturalness         NaturalnessItem     @relation(fields: [naturalness_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  naturalness_id      Int
  intelligibility     IntelligibilityItem @relation(fields: [intelligibility_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  intelligibility_id  Int
}
